// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "SchemaObject.h"
#include "TypeObject.h"
#include "DirectiveObject.h"

#include "graphqlservice/internal/Introspection.h"

#include <algorithm>
#include <functional>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::introspection {
namespace object {

Schema::Schema(std::shared_ptr<introspection::Schema> pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::make_unique<Model<introspection::Schema>>(std::move(pimpl)) }
{
}

Schema::~Schema()
{
	// This is empty, but explicitly defined here so that it can access the un-exported destructor
	// of the implementation type.
}

service::TypeNames Schema::getTypeNames() const noexcept
{
	return {
		R"gql(__Schema)gql"sv
	};
}

service::ResolverMap Schema::getResolvers() const noexcept
{
	return {
		{ R"gql(types)gql"sv, [this](service::ResolverParams&& params) { return resolveTypes(std::move(params)); } },
		{ R"gql(queryType)gql"sv, [this](service::ResolverParams&& params) { return resolveQueryType(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(directives)gql"sv, [this](service::ResolverParams&& params) { return resolveDirectives(std::move(params)); } },
		{ R"gql(description)gql"sv, [this](service::ResolverParams&& params) { return resolveDescription(std::move(params)); } },
		{ R"gql(mutationType)gql"sv, [this](service::ResolverParams&& params) { return resolveMutationType(std::move(params)); } },
		{ R"gql(subscriptionType)gql"sv, [this](service::ResolverParams&& params) { return resolveSubscriptionType(std::move(params)); } }
	};
}

service::AwaitableResolver Schema::resolveDescription(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getDescription();
	resolverLock.unlock();

	return service::ModifiedResult<std::string>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolveTypes(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getTypes();
	resolverLock.unlock();

	return service::ModifiedResult<Type>::convert<service::TypeModifier::List>(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolveQueryType(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getQueryType();
	resolverLock.unlock();

	return service::ModifiedResult<Type>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolveMutationType(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getMutationType();
	resolverLock.unlock();

	return service::ModifiedResult<Type>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolveSubscriptionType(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getSubscriptionType();
	resolverLock.unlock();

	return service::ModifiedResult<Type>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolveDirectives(service::ResolverParams&& params) const
{
	std::unique_lock resolverLock(_resolverMutex);
	auto result = _pimpl->getDirectives();
	resolverLock.unlock();

	return service::ModifiedResult<Directive>::convert<service::TypeModifier::List>(std::move(result), std::move(params));
}

service::AwaitableResolver Schema::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(__Schema)gql" }, std::move(params));
}

} // namespace object

void AddSchemaDetails(const std::shared_ptr<schema::ObjectType>& typeSchema, const std::shared_ptr<schema::Schema>& schema)
{
	typeSchema->AddFields({
		schema::Field::Make(R"gql(description)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(String)gql"sv)),
		schema::Field::Make(R"gql(types)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(__Type)gql"sv))))),
		schema::Field::Make(R"gql(queryType)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(__Type)gql"sv))),
		schema::Field::Make(R"gql(mutationType)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(__Type)gql"sv)),
		schema::Field::Make(R"gql(subscriptionType)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(__Type)gql"sv)),
		schema::Field::Make(R"gql(directives)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->WrapType(introspection::TypeKind::LIST, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(__Directive)gql"sv)))))
	});
}

} // namespace graphql::introspection
