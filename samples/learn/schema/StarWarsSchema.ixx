// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

module;

#include "StarWarsSchema.h"

export module GraphQL.StarWars.StarWarsSchema;

namespace included = graphql::learn;

export namespace graphql::learn {

namespace exported {

using Episode = included::Episode;

constexpr auto getEpisodeNames() noexcept
{
	return included::getEpisodeNames();
}

constexpr auto getEpisodeValues() noexcept
{
	return included::getEpisodeValues();
}

using ReviewInput= included::ReviewInput;

using Operations = included::Operations;

void AddCharacterDetails(const std::shared_ptr<schema::InterfaceType>& typeCharacter, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddCharacterDetails(typeCharacter, schema);
}

void AddHumanDetails(const std::shared_ptr<schema::ObjectType>& typeHuman, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddHumanDetails(typeHuman, schema);
}

void AddDroidDetails(const std::shared_ptr<schema::ObjectType>& typeDroid, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddDroidDetails(typeDroid, schema);
}

void AddQueryDetails(const std::shared_ptr<schema::ObjectType>& typeQuery, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddQueryDetails(typeQuery, schema);
}

void AddReviewDetails(const std::shared_ptr<schema::ObjectType>& typeReview, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddReviewDetails(typeReview, schema);
}

void AddMutationDetails(const std::shared_ptr<schema::ObjectType>& typeMutation, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddMutationDetails(typeMutation, schema);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	return included::GetSchema();
}

} // namespace exported

using namespace exported;

} // namespace graphql::learn
