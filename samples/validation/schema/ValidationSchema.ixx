// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

module;

#include "ValidationSchema.h"

export module GraphQL.Validation.ValidationSchema;

namespace included = graphql::validation;

export namespace graphql::validation {

namespace exported {

using DogCommand = included::DogCommand;

constexpr auto getDogCommandNames() noexcept
{
	return included::getDogCommandNames();
}

constexpr auto getDogCommandValues() noexcept
{
	return included::getDogCommandValues();
}

using CatCommand = included::CatCommand;

constexpr auto getCatCommandNames() noexcept
{
	return included::getCatCommandNames();
}

constexpr auto getCatCommandValues() noexcept
{
	return included::getCatCommandValues();
}

using ComplexInput= included::ComplexInput;

using Operations = included::Operations;

void AddSentientDetails(const std::shared_ptr<schema::InterfaceType>& typeSentient, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddSentientDetails(typeSentient, schema);
}

void AddPetDetails(const std::shared_ptr<schema::InterfaceType>& typePet, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddPetDetails(typePet, schema);
}

void AddNodeDetails(const std::shared_ptr<schema::InterfaceType>& typeNode, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddNodeDetails(typeNode, schema);
}

void AddResourceDetails(const std::shared_ptr<schema::InterfaceType>& typeResource, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddResourceDetails(typeResource, schema);
}

void AddCatOrDogDetails(const std::shared_ptr<schema::UnionType>& typeCatOrDog, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddCatOrDogDetails(typeCatOrDog, schema);
}

void AddDogOrHumanDetails(const std::shared_ptr<schema::UnionType>& typeDogOrHuman, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddDogOrHumanDetails(typeDogOrHuman, schema);
}

void AddHumanOrAlienDetails(const std::shared_ptr<schema::UnionType>& typeHumanOrAlien, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddHumanOrAlienDetails(typeHumanOrAlien, schema);
}

void AddQueryDetails(const std::shared_ptr<schema::ObjectType>& typeQuery, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddQueryDetails(typeQuery, schema);
}

void AddDogDetails(const std::shared_ptr<schema::ObjectType>& typeDog, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddDogDetails(typeDog, schema);
}

void AddAlienDetails(const std::shared_ptr<schema::ObjectType>& typeAlien, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddAlienDetails(typeAlien, schema);
}

void AddHumanDetails(const std::shared_ptr<schema::ObjectType>& typeHuman, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddHumanDetails(typeHuman, schema);
}

void AddCatDetails(const std::shared_ptr<schema::ObjectType>& typeCat, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddCatDetails(typeCat, schema);
}

void AddMutationDetails(const std::shared_ptr<schema::ObjectType>& typeMutation, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddMutationDetails(typeMutation, schema);
}

void AddMutateDogResultDetails(const std::shared_ptr<schema::ObjectType>& typeMutateDogResult, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddMutateDogResultDetails(typeMutateDogResult, schema);
}

void AddSubscriptionDetails(const std::shared_ptr<schema::ObjectType>& typeSubscription, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddSubscriptionDetails(typeSubscription, schema);
}

void AddMessageDetails(const std::shared_ptr<schema::ObjectType>& typeMessage, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddMessageDetails(typeMessage, schema);
}

void AddArgumentsDetails(const std::shared_ptr<schema::ObjectType>& typeArguments, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddArgumentsDetails(typeArguments, schema);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	return included::GetSchema();
}

} // namespace exported

using namespace exported;

} // namespace graphql::validation
