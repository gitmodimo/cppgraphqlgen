// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

module;

#include "TodaySchema.h"

export module GraphQL.Today.TodaySchema;

namespace included = graphql::today;

export namespace graphql::today {

namespace exported {

using TaskState = included::TaskState;

constexpr auto getTaskStateNames() noexcept
{
	return included::getTaskStateNames();
}

constexpr auto getTaskStateValues() noexcept
{
	return included::getTaskStateValues();
}

using CompleteTaskInput= included::CompleteTaskInput;
using ThirdNestedInput= included::ThirdNestedInput;
using FourthNestedInput= included::FourthNestedInput;
using IncludeNullableSelfInput= included::IncludeNullableSelfInput;
using IncludeNonNullableListSelfInput= included::IncludeNonNullableListSelfInput;
using StringOperationFilterInput= included::StringOperationFilterInput;
using SecondNestedInput= included::SecondNestedInput;
using ForwardDeclaredInput= included::ForwardDeclaredInput;
using FirstNestedInput= included::FirstNestedInput;

using Operations = included::Operations;

void AddNodeDetails(const std::shared_ptr<schema::InterfaceType>& typeNode, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddNodeDetails(typeNode, schema);
}

void AddUnionTypeDetails(const std::shared_ptr<schema::UnionType>& typeUnionType, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddUnionTypeDetails(typeUnionType, schema);
}

void AddQueryDetails(const std::shared_ptr<schema::ObjectType>& typeQuery, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddQueryDetails(typeQuery, schema);
}

void AddPageInfoDetails(const std::shared_ptr<schema::ObjectType>& typePageInfo, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddPageInfoDetails(typePageInfo, schema);
}

void AddAppointmentEdgeDetails(const std::shared_ptr<schema::ObjectType>& typeAppointmentEdge, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddAppointmentEdgeDetails(typeAppointmentEdge, schema);
}

void AddAppointmentConnectionDetails(const std::shared_ptr<schema::ObjectType>& typeAppointmentConnection, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddAppointmentConnectionDetails(typeAppointmentConnection, schema);
}

void AddTaskEdgeDetails(const std::shared_ptr<schema::ObjectType>& typeTaskEdge, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddTaskEdgeDetails(typeTaskEdge, schema);
}

void AddTaskConnectionDetails(const std::shared_ptr<schema::ObjectType>& typeTaskConnection, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddTaskConnectionDetails(typeTaskConnection, schema);
}

void AddFolderEdgeDetails(const std::shared_ptr<schema::ObjectType>& typeFolderEdge, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddFolderEdgeDetails(typeFolderEdge, schema);
}

void AddFolderConnectionDetails(const std::shared_ptr<schema::ObjectType>& typeFolderConnection, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddFolderConnectionDetails(typeFolderConnection, schema);
}

void AddCompleteTaskPayloadDetails(const std::shared_ptr<schema::ObjectType>& typeCompleteTaskPayload, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddCompleteTaskPayloadDetails(typeCompleteTaskPayload, schema);
}

void AddMutationDetails(const std::shared_ptr<schema::ObjectType>& typeMutation, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddMutationDetails(typeMutation, schema);
}

void AddSubscriptionDetails(const std::shared_ptr<schema::ObjectType>& typeSubscription, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddSubscriptionDetails(typeSubscription, schema);
}

void AddAppointmentDetails(const std::shared_ptr<schema::ObjectType>& typeAppointment, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddAppointmentDetails(typeAppointment, schema);
}

void AddTaskDetails(const std::shared_ptr<schema::ObjectType>& typeTask, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddTaskDetails(typeTask, schema);
}

void AddFolderDetails(const std::shared_ptr<schema::ObjectType>& typeFolder, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddFolderDetails(typeFolder, schema);
}

void AddNestedTypeDetails(const std::shared_ptr<schema::ObjectType>& typeNestedType, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddNestedTypeDetails(typeNestedType, schema);
}

void AddExpensiveDetails(const std::shared_ptr<schema::ObjectType>& typeExpensive, const std::shared_ptr<schema::Schema>& schema)
{
	included::AddExpensiveDetails(typeExpensive, schema);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	return included::GetSchema();
}

} // namespace exported

using namespace exported;

} // namespace graphql::today
